// Code generated by go-bindata.
// sources:
// templates/default.nix
// templates/deps.nix
// DO NOT EDIT!

package go2nix

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesDefaultNix = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x91\x4f\x6f\x83\x30\x0c\xc5\xef\x7c\x0a\xab\xdd\xb1\x80\x54\x69\x3b\x74\xda\xad\xd2\x6e\x6b\xb5\x6e\xbb\x54\x1c\x4c\xe2\x26\x11\x10\xaa\x24\xb0\x3f\x88\xef\x3e\x53\x68\xd7\x49\xbd\xbd\xd8\x3f\xfb\x3d\xf0\x1c\xde\xb4\xf1\x70\x30\x25\xc1\x27\x7a\x50\x64\xc9\x61\x20\x09\xf9\x37\xe8\x10\x8e\x7e\x95\xa6\xca\x04\xdd\xe4\x89\xa8\xab\xb4\xc0\xca\x94\x42\x57\xa9\xaa\x97\xd6\x7c\x41\xbb\xdf\x43\xf2\x41\xce\x9b\xda\x42\x96\x45\x1d\xf8\x20\xc9\xb6\x0b\xc8\x1b\x53\xca\xe7\x7a\x8b\xa2\x40\x45\x0b\x38\x50\x10\x9a\x37\x4d\x4a\xab\x49\xe4\x3f\x6e\x52\xbe\xb5\xd0\xaf\xa2\xe8\xff\x24\x38\x12\xd0\x45\x00\x16\x2b\x82\x27\x98\x0d\x8e\xdb\x42\x25\x2f\xc3\x3b\xcb\xe2\xc6\xfa\x80\x79\x49\xf1\x5d\xd7\x8e\x41\xfa\xd9\x23\xf3\xd3\xe3\x7a\xe4\xb2\xf4\x2a\x32\xb3\x0c\xab\x73\x67\x8b\x41\xdf\x70\x19\x29\xef\x04\xf7\xce\x5f\x72\x4a\x05\x9c\xaf\xbd\x1e\xd8\xd5\x8d\x13\x94\xbc\x52\x6b\xfe\x1c\x06\xae\x71\xe5\x0d\xee\x9d\xab\x17\xc4\x6b\x5c\xde\x3f\xdc\xa0\x76\x63\x63\x02\xfb\x29\xf2\x9a\x8e\x9e\xe1\x24\x95\x2c\x12\x3e\xc7\xa9\xce\x27\xdd\xac\x37\x2b\x40\x29\xa1\xa2\x80\x12\x03\x5e\x4e\xc9\x50\xed\x93\xda\xa9\x41\x1d\x0b\xe5\xd3\x0a\x6d\x83\x65\x3a\xf7\x24\x62\xfe\x91\x56\xa2\x93\xf1\x30\x17\x63\x08\xce\xe4\x4d\x20\xcf\x5b\x87\x0a\x7b\x75\xa3\x7d\x1f\xfd\x06\x00\x00\xff\xff\xd2\x7d\x14\xc0\x39\x02\x00\x00")

func templatesDefaultNixBytes() ([]byte, error) {
	return bindataRead(
		_templatesDefaultNix,
		"templates/default.nix",
	)
}

func templatesDefaultNix() (*asset, error) {
	bytes, err := templatesDefaultNixBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/default.nix", size: 569, mode: os.FileMode(420), modTime: time.Unix(1498576237, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesDepsNix = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\xcf\x41\x4b\xc3\x30\x1c\x05\xf0\x7b\x3f\xc5\x63\x9e\x6d\x60\xa0\x07\xc5\x9b\x67\x19\x6e\x7a\x09\x3d\xfc\x97\xfd\x97\x84\x35\x49\x49\xd2\xea\x90\x7d\x77\x9b\x55\xcb\xe8\x21\x04\x5e\x7e\x0f\xf2\xee\xb0\x33\x36\xe1\x68\x5b\xc6\x17\x25\x68\xf6\x1c\x29\xf3\x01\xfb\x33\x4c\xce\x5d\x7a\x12\x42\xdb\x6c\xfa\x7d\xad\x82\x13\x27\x72\xb6\x55\xc6\x09\x1d\xd6\xde\x7e\x63\x90\x12\xf5\x27\xc7\x64\x83\x47\xd3\x54\xb2\x92\xf2\x1e\x91\xbc\x66\xd4\xaf\xdc\xa5\x12\x02\x3f\xe3\x01\x74\xd8\x90\x3a\x91\xe6\x0d\x65\x83\x17\xac\x4a\xf9\x8d\x1c\x8f\x68\xf5\x7c\x25\x47\xce\xaa\x3c\x4d\x05\x20\x9f\x3b\xfe\x97\xdb\xd0\x47\xc5\xf5\xae\x44\x73\x01\xe8\x63\xbb\x10\x1f\x63\x72\x03\x22\x0f\x0b\xf0\xce\x83\xfd\xfb\xf1\xac\x92\xa1\xf5\xc3\xe3\x02\x6e\xa7\x70\x66\x97\x72\x5d\xae\x1b\xd9\x1f\xca\xb6\xa6\xfa\x0d\x00\x00\xff\xff\xe9\x00\xd5\xc8\x43\x01\x00\x00")

func templatesDepsNixBytes() ([]byte, error) {
	return bindataRead(
		_templatesDepsNix,
		"templates/deps.nix",
	)
}

func templatesDepsNix() (*asset, error) {
	bytes, err := templatesDepsNixBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/deps.nix", size: 323, mode: os.FileMode(420), modTime: time.Unix(1498576203, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/default.nix": templatesDefaultNix,
	"templates/deps.nix": templatesDepsNix,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"default.nix": &bintree{templatesDefaultNix, map[string]*bintree{}},
		"deps.nix": &bintree{templatesDepsNix, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

